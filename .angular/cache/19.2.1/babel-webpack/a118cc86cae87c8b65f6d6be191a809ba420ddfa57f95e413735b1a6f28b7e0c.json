{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./owner-dashboard.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./owner-dashboard.component.css?ngResource\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ProductService } from '../../services/product.service';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nlet OwnerDashboardComponent = class OwnerDashboardComponent {\n  router;\n  productService;\n  fileInput;\n  //product = { name: '', description: '', price: 0, quantity: 0, image: '' };\n  product = {\n    name: '',\n    description: '',\n    price: 0,\n    quantity: 0,\n    category: '',\n    // added category\n    image: ''\n  };\n  allProducts = [];\n  uploadedProducts = [];\n  selectedImage = '';\n  constructor(router, productService) {\n    this.router = router;\n    this.productService = productService;\n  }\n  ngOnInit() {\n    this.loadProducts();\n  }\n  uploadProduct(form) {\n    if (!form.valid || !this.selectedImage) {\n      alert('Please fill all fields and upload an image.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', this.product.name);\n    formData.append('description', this.product.description);\n    formData.append('price', this.product.price.toString());\n    formData.append('quantity', this.product.quantity.toString());\n    formData.append('category', this.product.category); // ✅ Add category\n    formData.append('image', this.product.image);\n    // this.productService.addProduct(formData){\n    //   next: (res: any) => {\n    //     this.toastMessage = '✅ Product uploaded successfully!';\n    //     this.showToast();\n    //     form.resetForm();\n    //   },\n    //   error: () => {\n    //     this.toastMessage = '❌ Failed to upload product.';\n    //     this.showToast();\n    //   }\n    // });\n    const newProduct = {\n      name: this.product.name.trim(),\n      description: this.product.description.trim(),\n      price: this.product.price,\n      quantity: this.product.quantity,\n      category: this.product.category.trim(),\n      // added category\n      image: this.selectedImage\n    };\n    Swal.fire({\n      icon: 'success',\n      title: 'Product Added!',\n      text: `✅ ${newProduct.name} has been added to Inventory.`,\n      showConfirmButton: false,\n      timer: 2500\n    });\n    if (!newProduct.name || !newProduct.description || newProduct.price <= 0 || newProduct.quantity <= 0 || !newProduct.category) {\n      alert('Please provide valid product details.');\n      return;\n    }\n    this.productService.addProduct(newProduct);\n    this.uploadedProducts = this.productService.getProducts();\n    // Reset form and image input\n    form.resetForm();\n    this.fileInput.nativeElement.value = '';\n    this.selectedImage = '';\n    this.product = {\n      name: '',\n      description: '',\n      price: 0,\n      quantity: 0,\n      category: '',\n      image: ''\n    };\n    this.showToast(`✅ Added \"${newProduct.name}\" to Inventory`);\n    //alert(\"Added: \"+ newProduct.name + \" to Inventory.\");\n  }\n  onImageSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.selectedImage = reader.result;\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  loadProducts() {\n    this.allProducts = JSON.parse(localStorage.getItem('products') || '[]');\n  }\n  deleteProduct(index) {\n    const products = JSON.parse(localStorage.getItem('products') || '[]');\n    products.splice(index, 1);\n    localStorage.setItem('products', JSON.stringify(products));\n    this.loadProducts();\n  }\n  toastMessage = '';\n  showToast(message) {\n    this.toastMessage = message;\n    const toastEl = document.querySelector('.toast');\n    const toast = new bootstrap.Toast(toastEl);\n    toast.show();\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: ProductService\n  }];\n  static propDecorators = {\n    fileInput: [{\n      type: ViewChild,\n      args: ['fileInput']\n    }]\n  };\n};\nOwnerDashboardComponent = __decorate([Component({\n  selector: 'app-owner-dashboard',\n  standalone: false,\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OwnerDashboardComponent);\nexport { OwnerDashboardComponent };\n// import { Component, OnInit } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { ProductService } from '../../services/product.service';\n// @Component({\n//   selector: 'app-owner-dashboard',\n//   standalone: false,\n//   templateUrl: './owner-dashboard.component.html'\n// })\n// export class OwnerDashboardComponent implements OnInit {\n//   product: any = { name: '', description: '', price: 0, image: '' };\n//   uploadedProducts: any[] = [];\n//   constructor(private router: Router, private productService: ProductService) {}\n//   ngOnInit() {\n//     const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';\n//     if (!isLoggedIn) {\n//       this.router.navigate(['/owner-dashboard']);\n//     }\n//     this.uploadedProducts = this.productService.getProducts();\n//   }\n//   onImageSelected(event: any) {\n//     const file = event.target.files[0];\n//     const reader = new FileReader();\n//     reader.onload = () => {\n//       this.product.image = reader.result;\n//     };\n//     reader.readAsDataURL(file);\n//   }\n//   uploadProduct() {\n//     this.productService.addProduct({ ...this.product });\n//     this.uploadedProducts = this.productService.getProducts();\n//     this.product = { name: '', description: '', price: 0, image: '' };\n//   }\n//   logout() {\n//     localStorage.removeItem('adminLoggedIn');\n//     this.router.navigate(['/store']);\n//   }\n// }","map":{"version":3,"names":["Component","ViewChild","ProductService","Router","Swal","OwnerDashboardComponent","router","productService","fileInput","product","name","description","price","quantity","category","image","allProducts","uploadedProducts","selectedImage","constructor","ngOnInit","loadProducts","uploadProduct","form","valid","alert","formData","FormData","append","toString","newProduct","trim","fire","icon","title","text","showConfirmButton","timer","addProduct","getProducts","resetForm","nativeElement","value","showToast","onImageSelected","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","JSON","parse","localStorage","getItem","deleteProduct","index","products","splice","setItem","stringify","toastMessage","message","toastEl","document","querySelector","toast","bootstrap","Toast","show","args","__decorate","selector","standalone","template","__NG_CLI_RESOURCE__0"],"sources":["E:\\folk1\\building\\src\\app\\page\\owner-dashboard\\owner-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ProductService } from '../../services/product.service';\r\nimport { Router } from '@angular/router';\r\nimport { NgForm } from '@angular/forms';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\ndeclare var bootstrap: any;\r\n\r\n@Component({\r\n  selector: 'app-owner-dashboard',\r\n  standalone: false,\r\n  templateUrl: './owner-dashboard.component.html',\r\n  styleUrl: './owner-dashboard.component.css'\r\n})\r\nexport class OwnerDashboardComponent implements OnInit {\r\n@ViewChild('fileInput') fileInput: any;\r\n//product = { name: '', description: '', price: 0, quantity: 0, image: '' };\r\nproduct = {\r\n  name: '',\r\n  description: '',\r\n  price: 0,\r\n  quantity: 0,\r\n  category: '', // added category\r\n  image: ''\r\n};\r\n\r\nallProducts: any[] = [];\r\nuploadedProducts: any[] = [];\r\nselectedImage: string = '';\r\n\r\n\r\n\r\n\r\nconstructor(private router: Router, private productService: ProductService) {}\r\n\r\nngOnInit() {\r\n  this.loadProducts();\r\n}\r\n\r\nuploadProduct(form: NgForm) {\r\n  if (!form.valid || !this.selectedImage) {\r\n    alert('Please fill all fields and upload an image.');\r\n    return;\r\n  }\r\n  const formData = new FormData();\r\n  formData.append('name', this.product.name);\r\n  formData.append('description', this.product.description);\r\n  formData.append('price', this.product.price.toString());\r\nformData.append('quantity', this.product.quantity.toString());\r\n  formData.append('category', this.product.category); // ✅ Add category\r\n  formData.append('image', this.product.image);\r\n\r\n\r\n  // this.productService.addProduct(formData){\r\n  //   next: (res: any) => {\r\n  //     this.toastMessage = '✅ Product uploaded successfully!';\r\n  //     this.showToast();\r\n  //     form.resetForm();\r\n  //   },\r\n  //   error: () => {\r\n  //     this.toastMessage = '❌ Failed to upload product.';\r\n  //     this.showToast();\r\n  //   }\r\n  // });\r\n  \r\n  const newProduct = {\r\n    name: this.product.name.trim(),\r\n    description: this.product.description.trim(),\r\n    price: this.product.price,\r\n    quantity: this.product.quantity,\r\n    category: this.product.category.trim(), // added category\r\n    image: this.selectedImage\r\n  };\r\n  \r\n  Swal.fire({\r\n    icon: 'success',\r\n    title: 'Product Added!',\r\n    text: `✅ ${newProduct.name} has been added to Inventory.`,\r\n    showConfirmButton: false,\r\n    timer: 2500\r\n  });\r\n\r\n  if (!newProduct.name || !newProduct.description || newProduct.price <= 0 || newProduct.quantity <= 0 || !newProduct.category) {\r\n    alert('Please provide valid product details.');\r\n    return;\r\n  }\r\n\r\n  this.productService.addProduct(newProduct);\r\n  this.uploadedProducts = this.productService.getProducts();\r\n\r\n  // Reset form and image input\r\n  form.resetForm();\r\n  this.fileInput.nativeElement.value = '';\r\n  this.selectedImage = '';\r\n  this.product = { name: '', description: '', price: 0, quantity: 0,category: '', image: '' };\r\n\r\n  this.showToast(`✅ Added \"${newProduct.name}\" to Inventory`);\r\n  \r\n  //alert(\"Added: \"+ newProduct.name + \" to Inventory.\");\r\n}\r\n\r\nonImageSelected(event: any) {\r\n  const file = event.target.files[0];\r\n  if (file) {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.selectedImage = reader.result as string;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n}\r\n\r\nloadProducts() {\r\n  this.allProducts = JSON.parse(localStorage.getItem('products') || '[]');\r\n}\r\n\r\ndeleteProduct(index: number) {\r\n  const products = JSON.parse(localStorage.getItem('products') || '[]');\r\n  products.splice(index, 1);\r\n  localStorage.setItem('products', JSON.stringify(products));\r\n  this.loadProducts();\r\n}\r\n\r\n\r\n\r\ntoastMessage = '';\r\n\r\nshowToast(message: string) {\r\n  this.toastMessage = message;\r\n  const toastEl = document.querySelector('.toast') as HTMLElement;\r\n  const toast = new bootstrap.Toast(toastEl);\r\n  toast.show();\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Component, OnInit } from '@angular/core';\r\n// import { Router } from '@angular/router';\r\n// import { ProductService } from '../../services/product.service';\r\n\r\n// @Component({\r\n//   selector: 'app-owner-dashboard',\r\n//   standalone: false,\r\n//   templateUrl: './owner-dashboard.component.html'\r\n// })\r\n// export class OwnerDashboardComponent implements OnInit {\r\n//   product: any = { name: '', description: '', price: 0, image: '' };\r\n//   uploadedProducts: any[] = [];\r\n\r\n//   constructor(private router: Router, private productService: ProductService) {}\r\n\r\n//   ngOnInit() {\r\n//     const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';\r\n//     if (!isLoggedIn) {\r\n//       this.router.navigate(['/owner-dashboard']);\r\n//     }\r\n\r\n//     this.uploadedProducts = this.productService.getProducts();\r\n//   }\r\n\r\n//   onImageSelected(event: any) {\r\n//     const file = event.target.files[0];\r\n//     const reader = new FileReader();\r\n//     reader.onload = () => {\r\n//       this.product.image = reader.result;\r\n//     };\r\n//     reader.readAsDataURL(file);\r\n//   }\r\n\r\n//   uploadProduct() {\r\n//     this.productService.addProduct({ ...this.product });\r\n//     this.uploadedProducts = this.productService.getProducts();\r\n//     this.product = { name: '', description: '', price: 0, image: '' };\r\n//   }\r\n\r\n//   logout() {\r\n//     localStorage.removeItem('adminLoggedIn');\r\n//     this.router.navigate(['/store']);\r\n//   }\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}